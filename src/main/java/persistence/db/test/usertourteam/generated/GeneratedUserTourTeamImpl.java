package persistence.db.test.usertourteam.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import persistence.db.test.tour.Tour;
import persistence.db.test.user.User;
import persistence.db.test.usertourteam.UserTourTeam;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * persistence.db.test.usertourteam.UserTourTeam}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUserTourTeamImpl implements UserTourTeam {
    
    private int userTourTeamId;
    private String userId;
    private int tourId;
    private double budgetLeft;
    
    protected GeneratedUserTourTeamImpl() {}
    
    @Override
    public int getUserTourTeamId() {
        return userTourTeamId;
    }
    
    @Override
    public String getUserId() {
        return userId;
    }
    
    @Override
    public int getTourId() {
        return tourId;
    }
    
    @Override
    public double getBudgetLeft() {
        return budgetLeft;
    }
    
    @Override
    public UserTourTeam setUserTourTeamId(int userTourTeamId) {
        this.userTourTeamId = userTourTeamId;
        return this;
    }
    
    @Override
    public UserTourTeam setUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public UserTourTeam setTourId(int tourId) {
        this.tourId = tourId;
        return this;
    }
    
    @Override
    public UserTourTeam setBudgetLeft(double budgetLeft) {
        this.budgetLeft = budgetLeft;
        return this;
    }
    
    @Override
    public User findUserId(Manager<User> foreignManager) {
        return foreignManager.stream().filter(User.USER_ID.equal(getUserId())).findAny().orElse(null);
    }
    
    @Override
    public Tour findTourId(Manager<Tour> foreignManager) {
        return foreignManager.stream().filter(Tour.TOUR_ID.equal(getTourId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("userTourTeamId = " + Objects.toString(getUserTourTeamId()));
        sj.add("userId = "         + Objects.toString(getUserId()));
        sj.add("tourId = "         + Objects.toString(getTourId()));
        sj.add("budgetLeft = "     + Objects.toString(getBudgetLeft()));
        return "UserTourTeamImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof UserTourTeam)) { return false; }
        final UserTourTeam thatUserTourTeam = (UserTourTeam)that;
        if (this.getUserTourTeamId() != thatUserTourTeam.getUserTourTeamId()) { return false; }
        if (!Objects.equals(this.getUserId(), thatUserTourTeam.getUserId())) { return false; }
        if (this.getTourId() != thatUserTourTeam.getTourId()) { return false; }
        if (this.getBudgetLeft() != thatUserTourTeam.getBudgetLeft()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getUserTourTeamId());
        hash = 31 * hash + Objects.hashCode(getUserId());
        hash = 31 * hash + Integer.hashCode(getTourId());
        hash = 31 * hash + Double.hashCode(getBudgetLeft());
        return hash;
    }
}