package persistence.db.test.usertourteam.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.DoubleField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;
import persistence.db.test.tour.Tour;
import persistence.db.test.user.User;
import persistence.db.test.usertourteam.UserTourTeam;

/**
 * The generated base for the {@link
 * persistence.db.test.usertourteam.UserTourTeam}-interface representing
 * entities of the {@code UserTourTeam}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUserTourTeam {
    
    /**
     * This Field corresponds to the {@link UserTourTeam} field that can be
     * obtained using the {@link UserTourTeam#getUserTourTeamId()} method.
     */
    IntField<UserTourTeam, Integer> USER_TOUR_TEAM_ID = IntField.create(
        Identifier.USER_TOUR_TEAM_ID,
        UserTourTeam::getUserTourTeamId,
        UserTourTeam::setUserTourTeamId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link UserTourTeam} field that can be
     * obtained using the {@link UserTourTeam#getUserId()} method.
     */
    StringForeignKeyField<UserTourTeam, String, User> USER_ID = StringForeignKeyField.create(
        Identifier.USER_ID,
        UserTourTeam::getUserId,
        UserTourTeam::setUserId,
        User.USER_ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link UserTourTeam} field that can be
     * obtained using the {@link UserTourTeam#getTourId()} method.
     */
    IntForeignKeyField<UserTourTeam, Integer, Tour> TOUR_ID = IntForeignKeyField.create(
        Identifier.TOUR_ID,
        UserTourTeam::getTourId,
        UserTourTeam::setTourId,
        Tour.TOUR_ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link UserTourTeam} field that can be
     * obtained using the {@link UserTourTeam#getBudgetLeft()} method.
     */
    DoubleField<UserTourTeam, Double> BUDGET_LEFT = DoubleField.create(
        Identifier.BUDGET_LEFT,
        UserTourTeam::getBudgetLeft,
        UserTourTeam::setBudgetLeft,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the userTourTeamId of this UserTourTeam. The userTourTeamId field
     * corresponds to the database column test.test.UserTourTeam.UserTourTeamId.
     * 
     * @return the userTourTeamId of this UserTourTeam
     */
    int getUserTourTeamId();
    
    /**
     * Returns the userId of this UserTourTeam. The userId field corresponds to
     * the database column test.test.UserTourTeam.UserId.
     * 
     * @return the userId of this UserTourTeam
     */
    String getUserId();
    
    /**
     * Returns the tourId of this UserTourTeam. The tourId field corresponds to
     * the database column test.test.UserTourTeam.TourId.
     * 
     * @return the tourId of this UserTourTeam
     */
    int getTourId();
    
    /**
     * Returns the budgetLeft of this UserTourTeam. The budgetLeft field
     * corresponds to the database column test.test.UserTourTeam.BudgetLeft.
     * 
     * @return the budgetLeft of this UserTourTeam
     */
    double getBudgetLeft();
    
    /**
     * Sets the userTourTeamId of this UserTourTeam. The userTourTeamId field
     * corresponds to the database column test.test.UserTourTeam.UserTourTeamId.
     * 
     * @param userTourTeamId to set of this UserTourTeam
     * @return               this UserTourTeam instance
     */
    UserTourTeam setUserTourTeamId(int userTourTeamId);
    
    /**
     * Sets the userId of this UserTourTeam. The userId field corresponds to the
     * database column test.test.UserTourTeam.UserId.
     * 
     * @param userId to set of this UserTourTeam
     * @return       this UserTourTeam instance
     */
    UserTourTeam setUserId(String userId);
    
    /**
     * Sets the tourId of this UserTourTeam. The tourId field corresponds to the
     * database column test.test.UserTourTeam.TourId.
     * 
     * @param tourId to set of this UserTourTeam
     * @return       this UserTourTeam instance
     */
    UserTourTeam setTourId(int tourId);
    
    /**
     * Sets the budgetLeft of this UserTourTeam. The budgetLeft field
     * corresponds to the database column test.test.UserTourTeam.BudgetLeft.
     * 
     * @param budgetLeft to set of this UserTourTeam
     * @return           this UserTourTeam instance
     */
    UserTourTeam setBudgetLeft(double budgetLeft);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    User findUserId(Manager<User> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Tour. If no such Tour
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Tour findTourId(Manager<Tour> foreignManager);
    
    enum Identifier implements ColumnIdentifier<UserTourTeam> {
        
        USER_TOUR_TEAM_ID ("UserTourTeamId"),
        USER_ID           ("UserId"),
        TOUR_ID           ("TourId"),
        BUDGET_LEFT       ("BudgetLeft");
        
        private final String columnId;
        private final TableIdentifier<UserTourTeam> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "test";
        }
        
        @Override
        public String getSchemaId() {
            return "test";
        }
        
        @Override
        public String getTableId() {
            return "UserTourTeam";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<UserTourTeam> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}