package persistence.db.test.user.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import persistence.db.test.user.User;

import java.util.Objects;
import java.util.OptionalDouble;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * persistence.db.test.user.User}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUserImpl implements User {
    
    private int userId;
    private String name;
    private String password;
    private Double score;
    
    protected GeneratedUserImpl() {}
    
    @Override
    public int getUserId() {
        return userId;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public String getPassword() {
        return password;
    }
    
    @Override
    public OptionalDouble getScore() {
        return OptionalUtil.ofNullable(score);
    }
    
    @Override
    public User setUserId(int userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public User setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public User setPassword(String password) {
        this.password = password;
        return this;
    }
    
    @Override
    public User setScore(Double score) {
        this.score = score;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("userId = "   + Objects.toString(getUserId()));
        sj.add("name = "     + Objects.toString(getName()));
        sj.add("password = " + Objects.toString(getPassword()));
        sj.add("score = "    + Objects.toString(OptionalUtil.unwrap(getScore())));
        return "UserImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof User)) { return false; }
        final User thatUser = (User)that;
        if (this.getUserId() != thatUser.getUserId()) { return false; }
        if (!Objects.equals(this.getName(), thatUser.getName())) { return false; }
        if (!Objects.equals(this.getPassword(), thatUser.getPassword())) { return false; }
        if (!Objects.equals(this.getScore(), thatUser.getScore())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getUserId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getPassword());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getScore()));
        return hash;
    }
}