package persistence.db.test.tour.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import persistence.db.test.tour.Tour;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * persistence.db.test.tour.Tour}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedTourImpl implements Tour {
    
    private int tourId;
    private String name;
    private Integer year;
    private Timestamp endOfRegistration;
    
    protected GeneratedTourImpl() {}
    
    @Override
    public int getTourId() {
        return tourId;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public OptionalInt getYear() {
        return OptionalUtil.ofNullable(year);
    }
    
    @Override
    public Optional<Timestamp> getEndOfRegistration() {
        return Optional.ofNullable(endOfRegistration);
    }
    
    @Override
    public Tour setTourId(int tourId) {
        this.tourId = tourId;
        return this;
    }
    
    @Override
    public Tour setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Tour setYear(Integer year) {
        this.year = year;
        return this;
    }
    
    @Override
    public Tour setEndOfRegistration(Timestamp endOfRegistration) {
        this.endOfRegistration = endOfRegistration;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("tourId = "            + Objects.toString(getTourId()));
        sj.add("name = "              + Objects.toString(getName()));
        sj.add("year = "              + Objects.toString(OptionalUtil.unwrap(getYear())));
        sj.add("endOfRegistration = " + Objects.toString(OptionalUtil.unwrap(getEndOfRegistration())));
        return "TourImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Tour)) { return false; }
        final Tour thatTour = (Tour)that;
        if (this.getTourId() != thatTour.getTourId()) { return false; }
        if (!Objects.equals(this.getName(), thatTour.getName())) { return false; }
        if (!Objects.equals(this.getYear(), thatTour.getYear())) { return false; }
        if (!Objects.equals(this.getEndOfRegistration(), thatTour.getEndOfRegistration())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getTourId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getYear()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEndOfRegistration()));
        return hash;
    }
}