package persistence.db.test.runner.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import persistence.db.test.runner.Runner;
import persistence.db.test.team.Team;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * persistence.db.test.runner.Runner}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedRunnerImpl implements Runner {
    
    private int runnerId;
    private String firstName;
    private String lastName;
    private String nationality;
    private String specialty;
    private Double height;
    private Double weight;
    private Double price;
    private Integer teamId;
    
    protected GeneratedRunnerImpl() {}
    
    @Override
    public int getRunnerId() {
        return runnerId;
    }
    
    @Override
    public Optional<String> getFirstName() {
        return Optional.ofNullable(firstName);
    }
    
    @Override
    public Optional<String> getLastName() {
        return Optional.ofNullable(lastName);
    }
    
    @Override
    public Optional<String> getNationality() {
        return Optional.ofNullable(nationality);
    }
    
    @Override
    public Optional<String> getSpecialty() {
        return Optional.ofNullable(specialty);
    }
    
    @Override
    public OptionalDouble getHeight() {
        return OptionalUtil.ofNullable(height);
    }
    
    @Override
    public OptionalDouble getWeight() {
        return OptionalUtil.ofNullable(weight);
    }
    
    @Override
    public OptionalDouble getPrice() {
        return OptionalUtil.ofNullable(price);
    }
    
    @Override
    public OptionalInt getTeamId() {
        return OptionalUtil.ofNullable(teamId);
    }
    
    @Override
    public Runner setRunnerId(int runnerId) {
        this.runnerId = runnerId;
        return this;
    }
    
    @Override
    public Runner setFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    @Override
    public Runner setLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public Runner setNationality(String nationality) {
        this.nationality = nationality;
        return this;
    }
    
    @Override
    public Runner setSpecialty(String specialty) {
        this.specialty = specialty;
        return this;
    }
    
    @Override
    public Runner setHeight(Double height) {
        this.height = height;
        return this;
    }
    
    @Override
    public Runner setWeight(Double weight) {
        this.weight = weight;
        return this;
    }
    
    @Override
    public Runner setPrice(Double price) {
        this.price = price;
        return this;
    }
    
    @Override
    public Runner setTeamId(Integer teamId) {
        this.teamId = teamId;
        return this;
    }
    
    @Override
    public Optional<Team> findTeamId(Manager<Team> foreignManager) {
        if (getTeamId().isPresent()) {
            return foreignManager.stream().filter(Team.TEAM_ID.equal(getTeamId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("runnerId = "    + Objects.toString(getRunnerId()));
        sj.add("firstName = "   + Objects.toString(OptionalUtil.unwrap(getFirstName())));
        sj.add("lastName = "    + Objects.toString(OptionalUtil.unwrap(getLastName())));
        sj.add("nationality = " + Objects.toString(OptionalUtil.unwrap(getNationality())));
        sj.add("specialty = "   + Objects.toString(OptionalUtil.unwrap(getSpecialty())));
        sj.add("height = "      + Objects.toString(OptionalUtil.unwrap(getHeight())));
        sj.add("weight = "      + Objects.toString(OptionalUtil.unwrap(getWeight())));
        sj.add("price = "       + Objects.toString(OptionalUtil.unwrap(getPrice())));
        sj.add("teamId = "      + Objects.toString(OptionalUtil.unwrap(getTeamId())));
        return "RunnerImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Runner)) { return false; }
        final Runner thatRunner = (Runner)that;
        if (this.getRunnerId() != thatRunner.getRunnerId()) { return false; }
        if (!Objects.equals(this.getFirstName(), thatRunner.getFirstName())) { return false; }
        if (!Objects.equals(this.getLastName(), thatRunner.getLastName())) { return false; }
        if (!Objects.equals(this.getNationality(), thatRunner.getNationality())) { return false; }
        if (!Objects.equals(this.getSpecialty(), thatRunner.getSpecialty())) { return false; }
        if (!Objects.equals(this.getHeight(), thatRunner.getHeight())) { return false; }
        if (!Objects.equals(this.getWeight(), thatRunner.getWeight())) { return false; }
        if (!Objects.equals(this.getPrice(), thatRunner.getPrice())) { return false; }
        if (!Objects.equals(this.getTeamId(), thatRunner.getTeamId())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getRunnerId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFirstName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLastName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getNationality()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getSpecialty()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getHeight()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getWeight()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPrice()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getTeamId()));
        return hash;
    }
}