package persistence.db.test.team.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import persistence.db.test.team.Team;
import persistence.db.test.tour.Tour;

/**
 * The generated base for the {@link persistence.db.test.team.Team}-interface
 * representing entities of the {@code Team}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedTeam {
    
    /**
     * This Field corresponds to the {@link Team} field that can be obtained
     * using the {@link Team#getTeamId()} method.
     */
    IntField<Team, Integer> TEAM_ID = IntField.create(
        Identifier.TEAM_ID,
        Team::getTeamId,
        Team::setTeamId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Team} field that can be obtained
     * using the {@link Team#getName()} method.
     */
    StringField<Team, String> NAME = StringField.create(
        Identifier.NAME,
        Team::getName,
        Team::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Team} field that can be obtained
     * using the {@link Team#getTourId()} method.
     */
    IntForeignKeyField<Team, Integer, Tour> TOUR_ID = IntForeignKeyField.create(
        Identifier.TOUR_ID,
        Team::getTourId,
        Team::setTourId,
        Tour.TOUR_ID,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the teamId of this Team. The teamId field corresponds to the
     * database column test.test.Team.TeamId.
     * 
     * @return the teamId of this Team
     */
    int getTeamId();
    
    /**
     * Returns the name of this Team. The name field corresponds to the database
     * column test.test.Team.Name.
     * 
     * @return the name of this Team
     */
    String getName();
    
    /**
     * Returns the tourId of this Team. The tourId field corresponds to the
     * database column test.test.Team.TourId.
     * 
     * @return the tourId of this Team
     */
    int getTourId();
    
    /**
     * Sets the teamId of this Team. The teamId field corresponds to the
     * database column test.test.Team.TeamId.
     * 
     * @param teamId to set of this Team
     * @return       this Team instance
     */
    Team setTeamId(int teamId);
    
    /**
     * Sets the name of this Team. The name field corresponds to the database
     * column test.test.Team.Name.
     * 
     * @param name to set of this Team
     * @return     this Team instance
     */
    Team setName(String name);
    
    /**
     * Sets the tourId of this Team. The tourId field corresponds to the
     * database column test.test.Team.TourId.
     * 
     * @param tourId to set of this Team
     * @return       this Team instance
     */
    Team setTourId(int tourId);
    
    /**
     * Queries the specified manager for the referenced Tour. If no such Tour
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Tour findTourId(Manager<Tour> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Team> {
        
        TEAM_ID ("TeamId"),
        NAME    ("Name"),
        TOUR_ID ("TourId");
        
        private final String columnId;
        private final TableIdentifier<Team> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "test";
        }
        
        @Override
        public String getSchemaId() {
            return "test";
        }
        
        @Override
        public String getTableId() {
            return "Team";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Team> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}