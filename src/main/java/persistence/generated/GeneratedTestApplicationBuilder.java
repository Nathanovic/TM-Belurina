package persistence.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.application.AbstractApplicationBuilder;
import persistence.TestApplication;
import persistence.TestApplicationBuilder;
import persistence.TestApplicationImpl;
import persistence.db.test.runner.RunnerManagerImpl;
import persistence.db.test.runner.RunnerSqlAdapter;
import persistence.db.test.team.TeamManagerImpl;
import persistence.db.test.team.TeamSqlAdapter;
import persistence.db.test.tour.TourManagerImpl;
import persistence.db.test.tour.TourSqlAdapter;
import persistence.db.test.user.UserManagerImpl;
import persistence.db.test.user.UserSqlAdapter;
import persistence.db.test.userteam.UserTeamManagerImpl;
import persistence.db.test.userteam.UserTeamSqlAdapter;

/**
 * A generated base {@link
 * com.speedment.runtime.application.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named test.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedTestApplicationBuilder extends AbstractApplicationBuilder<TestApplication, TestApplicationBuilder> {
    
    protected GeneratedTestApplicationBuilder() {
        super(TestApplicationImpl.class, GeneratedTestMetadata.class);
        withManager(RunnerManagerImpl.class);
        withManager(TeamManagerImpl.class);
        withManager(TourManagerImpl.class);
        withManager(UserManagerImpl.class);
        withManager(UserTeamManagerImpl.class);
        withComponent(RunnerSqlAdapter.class);
        withComponent(TeamSqlAdapter.class);
        withComponent(TourSqlAdapter.class);
        withComponent(UserSqlAdapter.class);
        withComponent(UserTeamSqlAdapter.class);
    }
    
    @Override
    public TestApplication build(Injector injector) {
        return injector.getOrThrow(TestApplication.class);
    }
}